* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root{
  --index: calc(1vw + 1vh);
  --transition: cubic-bezier(0.1, 0.7, 0, 1);
}

.item {
  width: calc(var(--index) * 3);
  height: calc(var(--index) * 12);
  background-size: cover;
  background-position: center;
  cursor: pointer;
  filter: grayscale(1) brightness(.8);
  transition: transform 1.25s var(--transition), filter 3s var(--transition), width 1.25s var(--transition);
  will-change: transform, filter, rotateY, width;

  &::before,
  &::after {
    content: '';
    position: absolute;
    height: 100%;
    width: 20px;
    right: calc(var(--index) -1);
  }

  &::after {
    left: calc(var(--index) -1);
  }

  &:hover {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 8));
  }

  &:hover + * {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 6)) rotateY(25deg);
    z-index: -1;
  }

  &:hover + * + * {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 3.5)) rotateY(20deg);
    z-index: -2;
  }

  &:hover + * + * + * {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 1.7)) rotateY(15deg);
    z-index: -3;
  }

  &:hover + * + * + * + * {
    filter: inherit;
    transform: translateZ(calc(var(--index) * .5)) rotateY(5deg);
    z-index: -4;
  }

  &:has(+ :hover) {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 6)) rotateY(-25deg);
  }

  &:has(+ * + :hover) {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 3.5)) rotateY(-20deg);
  }

  &:has(+ * + * + :hover) {
    filter: inherit;
    transform: translateZ(calc(var(--index) * 1.7)) rotateY(-15deg);
  }

  &:has(+ * + * + * + :hover) {
    filter: inherit;
    transform: translateZ(calc(var(--index) * .5)) rotateY(-5deg);
  }

  &:active,
  &:focus {
    width: 15vw;
    filter: inherit;
    z-index: 100;
    transform: translateZ(calc(var(--index) * 12));
    margin: 0 .35vw;
  }
}
